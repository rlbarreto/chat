'use strict';

const app = require('../app');
const debug = require('debug')('chat:server');
const http = require('http');
const passport = require('passport');
const OnlineChatters = require('../models/onlineChatter');
const ChatLog = require('../models/chatLog');
const webToken = require('../token');

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

const io = require('socket.io')(server);

var clients = {};

io.on('connection', function (client) {
  client.auth = false;
  client.on('authenticate', function (data) {

    if (data.token) {
        //jwt.decode(data.token, secret);
        client.userId = webToken.decode(data.token).userId;
        if (client.userId) {
          client.auth = true;

        }
      }
    })
  client.on('join', function(nickname){
    if (!client.auth) {
      return client.emit('error', 'Need authentication');
    }
    clients[nickname] = client;
    client.nickname = nickname;
    client.broadcast.emit('notification', client.nickname + " has joined!");
        //saveChatLog(undefined, newMessage);  // undefined because message is system generated
        //client.broadcast.emit("add chatter", client.nickname);
        io.sockets.emit("add chatter", client.nickname);
        console.log('Broadcasted to all clients, except the new one.');

        // get all the users
        OnlineChatters.find({}, function(err, result) {
          if (err) throw err;
            // object of all the users
            console.log('all chatters:', result);

            result.forEach(function(obj){
              client.emit("add chatter", obj.nickname);
              console.log('emitted ' + obj.nickname);
            });
          });

        // save new chatter to MongoDB
        var newChatter = new OnlineChatters({ nickname: nickname });

        newChatter.save(function(err) {
          if (err) throw err;
          console.log('newChatter saved successfully!');
        });

      });

  client.on('chat_friend', function(friendNickname) {
    console.log('chat_friend', friendNickname);
    var friendClient = clients[friendNickname];
    console.log(friendNickname);
    if (!friendClient) {
      return client.emit('notification', friendNickname + ' is offline');
    }

    var roomName = client.nickname + '_' + friendNickname;
    if (friendNickname < client.nickname) {
      roomName = friendNickname + '_' + client.nickname;
    }
    client.join(roomName);
    friendClient.join(roomName);

    client.emit('new_room', roomName);
    client.broadcast.to(roomName).emit('new_room', roomName);

    ChatLog.find({}).populate('sender').sort({'timestamp': -1}).limit(5).exec()
    .then(function(chatLogs) {
      console.log('carregou', chatLogs);
      for(var i = 0, length = chatLogs.length; i < length; i++) {
        var chatLog = chatLogs[i];
        io.sockets.in(roomName).emit('message', {roomName: chatLog.roomName, from: chatLog.sender.username, text: chatLog.message});
      }

    })


  });

  client.on('room_message', function (roomMessage) {
    console.log('broadcast', {roomName: roomMessage.roomName, text: roomMessage.message});

    var chatLog = new ChatLog({
      timestamp: Date.now(),
      roomName: roomMessage.roomName,
      message: roomMessage.message,
      sender: client.userId
    });

    chatLog.save(function(err) {
      if (err) throw err;
      client.broadcast.to(roomMessage.roomName).emit('message', {roomName: roomMessage.roomName, from: client.nickname, text: roomMessage.message});
      client.emit('message', {roomName: roomMessage.roomName, from: 'me', text: roomMessage.message});
    });


  });

  client.on('disconnect', function(nickname){

    console.log('in disconnect: ', nickname);

    if(client.nickname !== null && typeof client.nickname !== 'undefined'){
      client.broadcast.emit("remove chatter", client.nickname);

            //saveChatLog(undefined, newMessage);  // undefined because message strcture is different, it is system generated, no need to save nickname

            // remove from database
            OnlineChatters.findOneAndRemove({ nickname: client.nickname }, function(err) {
              if (err) throw err;
              console.log(client.nickname + ' deleted!');
            });
          }
        });
});


function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
  ? 'Pipe ' + port
  : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
    case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
    default:
    throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
  ? 'pipe ' + addr
  : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
